{"data":{"markdownRemark":{"html":"<p>之前完成了使用 Nodejs 脚本的形式跟合约进行交互，但是实际上用户还是希望能有一个美观的 UI 可以用的。所以这节咱们就来基于 react 技术开发 DApp ，实现跟合约的交互。本节的最终代码都在 Github 仓库中的 dapp1 文件夹中：<a href=\"https://github.com/happypeter/NervFirst/tree/master/dapp1\">https://github.com/happypeter/NervFirst/tree/master/dapp1</a> 。下面我们来说说具体的开发思路。</p>\n<h2 id=\"总体思路\"><a href=\"#%E6%80%BB%E4%BD%93%E6%80%9D%E8%B7%AF\" aria-label=\"总体思路 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>总体思路</h2>\n<p>先来说说 DApp 的总体架构。起码截止到目前，DApp 开发还是以 Web 架构为主，也就是说是可以跑到浏览器内的。本节我们使用 React 技术来开发 DApp 应用，这个在业界也是非常流行的，例如著名的 steemit 项目就是用 react 开发的，当然理论上讲任何的 Web 技术，或者是用 ios 或者 andriod 原生应用都可以开发 DApp 的。</p>\n<p>我们本节开发的 DApp 跟真实的 DApp 还是有一个明显的不同，因为本节会承接上一节，继续把 DApp 使用者的账户信息，包括私钥，保存到源码中。这样，当 DApp 跟合约交互的时候，底层的 Nervos.js 会直接调用私钥进行签名，整个签名过程从界面上是看不到的。后续的小节中，我们会把私钥信息移除，采用 Nervos 官方的 DApp 钱包 neuron 来完成交易签名，不带私钥的源码才是正确的开发 DApp 的方式，因为只有这样每个用户才可以用自己的 Neuron 钱包打开 DApp ，去使用自己的账户去发交易，跟合约进行交互。当然这是后话。</p>\n<p>本节中我们基本的思路就是把之前 interact 文件夹中的必要文件都拷贝到 react 项目中，然后就可以在浏览器中去跟智能合约进行交互了。</p>\n<h2 id=\"实现读取操作\"><a href=\"#%E5%AE%9E%E7%8E%B0%E8%AF%BB%E5%8F%96%E6%93%8D%E4%BD%9C\" aria-label=\"实现读取操作 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>实现读取操作</h2>\n<p>先来创建一个新的 react 项目，然后把必要的文件内容拷贝过来，实现读取链上数据的操作。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"gatsby-code-text\"><code class=\"gatsby-code-text\">create-react-app dapp1\nyarn add @nervos/chain</code></pre></div>\n<p>我们通过 create-react-app 这个脚手架工具来生成项目，如果系统上没有这个命令需要提前 npm 全局安装一下。项目的名字叫 dapp1 ，在本文开始给大家的链接中可以看到 dapp1 中的最终代码。进入项目安装一下 Nervos.js 。</p>\n<p>下面把 interact/ 中的各个不需要改动的文件直接拷贝到 dapp1/src 中。 需要拷贝的文件包括 config.js ，nervos.js ，simpleStore.js 和 transaction.js 。</p>\n<p>App.js</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">const</span> nervos <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./nervos'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> simpleStore <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./simpleStore'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ncomponentDidMount <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token keyword\">from</span> <span class=\"token operator\">=</span>\n    nervos<span class=\"token punctuation\">.</span>appchain<span class=\"token punctuation\">.</span>accounts<span class=\"token punctuation\">.</span>wallet<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span>\n    nervos<span class=\"token punctuation\">.</span>appchain<span class=\"token punctuation\">.</span>accounts<span class=\"token punctuation\">.</span>wallet<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">;</span>\n\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'from'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">from</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> times <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> simpleStore<span class=\"token punctuation\">.</span>simpleStoreContract<span class=\"token punctuation\">.</span>methods<span class=\"token punctuation\">.</span><span class=\"token function\">getList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">from</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'times'</span><span class=\"token punctuation\">,</span> times<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> messages <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span>\n    times<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>time <span class=\"token operator\">=></span>\n      simpleStore<span class=\"token punctuation\">.</span>simpleStoreContract<span class=\"token punctuation\">.</span>methods<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token keyword\">from</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'messages'</span><span class=\"token punctuation\">,</span> messages<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>接下来到 App.js 中完成读取链上数据的操作。首先导入 nervos 和 simpleStore ，然后需要添加一个异步的 <code class=\"gatsby-code-text\">componentDidMount</code> 函数，这个函数会在页面加载后自动执行。里面的内容就直接拷贝 interact/index.js 中的读取相关的代码即可。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"gatsby-code-text\"><code class=\"gatsby-code-text\">yarn start</code></pre></div>\n<p>启动项目，浏览器中打开 console 可以看到顺利读取到了链上的数据。</p>\n<h2 id=\"写操作\"><a href=\"#%E5%86%99%E6%93%8D%E4%BD%9C\" aria-label=\"写操作 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>写操作</h2>\n<p>接下来完成写操作。也是基本拷贝 interact/index.js 中的内容，配上一点点 React 的受控组件的小知识。</p>\n<p>App.js</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    msg<span class=\"token punctuation\">:</span> <span class=\"token string\">''</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function-variable function\">handleChange</span> <span class=\"token operator\">=</span> e <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      msg<span class=\"token punctuation\">:</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  handleSubmit <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> e <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    e<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> msg <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state\n    <span class=\"token keyword\">const</span> time <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">const</span> current <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> nervos<span class=\"token punctuation\">.</span>appchain<span class=\"token punctuation\">.</span><span class=\"token function\">getBlockNumber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> tx <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token operator\">...</span>simpleStore<span class=\"token punctuation\">.</span>transaction<span class=\"token punctuation\">,</span>\n      validUntilBlock<span class=\"token punctuation\">:</span> <span class=\"token operator\">+</span>current <span class=\"token operator\">+</span> <span class=\"token number\">88</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> simpleStore<span class=\"token punctuation\">.</span>simpleStoreContract<span class=\"token punctuation\">.</span>methods\n      <span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">,</span> <span class=\"token operator\">+</span>time<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>tx<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">const</span> receipt <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> nervos<span class=\"token punctuation\">.</span>listeners<span class=\"token punctuation\">.</span><span class=\"token function\">listenToTransactionReceipt</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>hash<span class=\"token punctuation\">)</span>\n    receipt<span class=\"token punctuation\">.</span>errorMessage <span class=\"token operator\">&amp;&amp;</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>receipt<span class=\"token punctuation\">.</span>errorMessage<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      msg<span class=\"token punctuation\">:</span> <span class=\"token string\">''</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">...</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">onSubmit</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleSubmit<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n            Name:\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span>\n              <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span>\n              <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>msg<span class=\"token punctuation\">}</span></span>\n              <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">}</span></span>\n            <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Submit<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>添加的 state 值以及 handleChange 函数以及下面的 render 函数中的 form 都是 react 的基础知识，联合起来构成了一个 react 的受控的 input 组件。目的只有一个就是拿到用户输入的字符串。点提交按钮的时候，handleSubmit 函数就会执行。里面可以通过 this.state.msg 拿到用户输入的字符串。所以 react 的内容就是这些。handleSubmit 中其余的内容，跟 interact/index.js 就没有什么区别了。</p>\n<p>浏览器中，提交一个留言，点下提交按钮后，界面会僵住几秒钟，当数据写入成功后，input 中的字符串被清空，表示提交成功了。刷新一下页面，终端中也可以看到最新提交的数据。</p>\n<h2 id=\"总结\"><a href=\"#%E6%80%BB%E7%BB%93\" aria-label=\"总结 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>总结</h2>\n<p>到这里，我们就把之前的 interact/ 中实现的跟合约的交互功能移动到 DApp 中了。我们没有实现特别完善的用户体验，因为剩下的工作都是 react 相关技巧了，不是我们本课程的重点。官方的 Demo 仓库中的 first_forever 项目就是最终的效果大家可以去参考：</p>\n<p><a href=\"https://github.com/cryptape/dapp-demos/tree/master/first_forever\">https://github.com/cryptape/dapp-demos/tree/master/first_forever</a> 。</p>\n<p>同时在咱们课程的仓库中，我也做了镜像：<a href=\"https://github.com/happypeter/NervFirst/tree/master/complete/first_forever\">https://github.com/happypeter/NervFirst/tree/master/complete/first_forever</a> 。</p>","frontmatter":{"title":"基于 React 开发 DApp","next":"13-neuron.html","prev":"11-gas.html"},"fields":{"path":"content/nerv-first/12-react.md","slug":"nerv-first/12-react.html"}}},"pageContext":{"slug":"nerv-first/12-react.html"}}