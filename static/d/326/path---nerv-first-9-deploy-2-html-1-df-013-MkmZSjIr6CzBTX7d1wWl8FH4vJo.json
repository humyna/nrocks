{"data":{"markdownRemark":{"html":"<p>UPDATE: 由于 Nervos 那边的升级，操作过程中有些步骤需要调整，具体内容参考：<a href=\"https://talk.nervos.org/t/topic/362\">https://talk.nervos.org/t/topic/362</a></p>\n<p>接着上一节，继续来完成部署。</p>\n<h2 id=\"总体思路\"><a href=\"#%E6%80%BB%E4%BD%93%E6%80%9D%E8%B7%AF\" aria-label=\"总体思路 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>总体思路</h2>\n<p>所有部署相关的文件和操作都在 deploy 这个文件夹内进行。部署合约的基本思路我们先来描述一下。首先要获得编译后的字节码和 ABI ，上一节我们把这些信息已经存放到 compiled.js 中了。部署就是用 Nervos.js 的 deploy 和 storeAbi 接口，把这两个东西上传到区块链上。上传过程是通过发一个交易，不过就像我们一会儿会看到的，合约部署交易跟普通交易有明显区别，最大的一个区别就是交易是没有接受方的。交易发起方，也就是我们自己持有私钥的那个账户中会扣除一定的手续费。然后系统会为我们自动创建一个合约账户，所以合约账户就是这个交易的接收方。合约账户是一个特殊的账户，没有任何人持有它的私钥，这样才能保证合约的执行是没有人能够干涉的。</p>\n<p>基本思路就是这些，本节后续操作都是来完成这个思路。</p>\n<h2 id=\"代码介绍\"><a href=\"#%E4%BB%A3%E7%A0%81%E4%BB%8B%E7%BB%8D\" aria-label=\"代码介绍 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>代码介绍</h2>\n<p>下面来添加 deploy 文件夹中的其他需要的代码。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"gatsby-code-text\"><code class=\"gatsby-code-text\">cd deploy\nnpm init -y\nyarn add @nervos/chain</code></pre></div>\n<p>进入 deploy 文件夹，安装一下 Nervos.js 。</p>\n<p>package.json</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"> <span class=\"token string\">\"deploy\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"node deploy.js\"</span></code></pre></div>\n<p>package.json 中添加一个 npm 脚本，方便启动部署过程。</p>\n<p>nervos.js</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span> Nervos <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'@nervos/chain'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> config <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./config'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> nervos <span class=\"token operator\">=</span> <span class=\"token function\">Nervos</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>chain<span class=\"token punctuation\">)</span> <span class=\"token comment\">// config.chain indicates that the address of Appchain to interact</span>\n<span class=\"token keyword\">const</span> account <span class=\"token operator\">=</span> nervos<span class=\"token punctuation\">.</span>appchain<span class=\"token punctuation\">.</span>accounts<span class=\"token punctuation\">.</span><span class=\"token function\">privateKeyToAccount</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>privateKey<span class=\"token punctuation\">)</span> <span class=\"token comment\">// create account by private key from config</span>\n\nnervos<span class=\"token punctuation\">.</span>appchain<span class=\"token punctuation\">.</span>accounts<span class=\"token punctuation\">.</span>wallet<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>account<span class=\"token punctuation\">)</span> <span class=\"token comment\">// add account to nervos</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> nervos</code></pre></div>\n<p>创建 nervos.js 文件，初始化 nervos 对象。通过使用 config.chain ，指定了要跟哪条区块链进行交互。privateKeyToAccount 用私钥生成 account 。通过 wallet.add 接口把 account 添加到了 nervos 对象中并最终导出。</p>\n<p>transaction.js</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">const</span> nervos <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./nervos'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> transaction <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">from</span><span class=\"token punctuation\">:</span> nervos<span class=\"token punctuation\">.</span>appchain<span class=\"token punctuation\">.</span>accounts<span class=\"token punctuation\">.</span>wallet<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">,</span>\n  privateKey<span class=\"token punctuation\">:</span> nervos<span class=\"token punctuation\">.</span>appchain<span class=\"token punctuation\">.</span>accounts<span class=\"token punctuation\">.</span>wallet<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>privateKey<span class=\"token punctuation\">,</span>\n  value<span class=\"token punctuation\">:</span> <span class=\"token string\">'0x0'</span><span class=\"token punctuation\">,</span>\n  nonce<span class=\"token punctuation\">:</span> <span class=\"token number\">999990</span><span class=\"token punctuation\">,</span>\n  quota<span class=\"token punctuation\">:</span> <span class=\"token number\">1000000</span><span class=\"token punctuation\">,</span>\n  chainId<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  version<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n  validUntilBlock<span class=\"token punctuation\">:</span> <span class=\"token number\">999999</span>\n<span class=\"token punctuation\">}</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> transaction</code></pre></div>\n<p>创建 transaction.js 文件。<code class=\"gatsby-code-text\">from</code> 一项指定了我们自己账户的地址。注意这里没有 <code class=\"gatsby-code-text\">to</code> 也就是没有接收方。<code class=\"gatsby-code-text\">privateKey</code> 一项用来指定私钥。特别说明一下，私钥是不能暴露给任何人的，这里为了演示方便，我们直接把代码写到了代码中，但是实际的 DApp 一般都是开源软件，所以私钥是不能写到代码中的。AppChain 的解决方式是把私钥保存到 Neuron 钱包中，需要进行交易的时候，让代码跟 Neuron 交互来完成签名。当然，我们这里还是先不涉及 Neuron ，暂时把私钥写到了代码中。<code class=\"gatsby-code-text\">value</code> 是交易数额，这里设置为0。后面的 <code class=\"gatsby-code-text\">quota</code> ，<code class=\"gatsby-code-text\">nonce</code> ，<code class=\"gatsby-code-text\">chainId</code> ，<code class=\"gatsby-code-text\">version</code> ，<code class=\"gatsby-code-text\">validUntilBlock</code> 都是跟交易安全相关的设置，可以到 AppChain 的核心，也就是 CITA 的官方文档上，找到各自的含义：<a href=\"https://docs.nervos.org/cita/#/rpc_guide/rpc\">https://docs.nervos.org/cita/#/rpc_guide/rpc</a> 。</p>\n<p>deploy.js</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">const</span> nervos <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./nervos'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> abi<span class=\"token punctuation\">,</span> bytecode <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./compiled.js'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> transaction <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./transaction'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> myContract <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">nervos<span class=\"token punctuation\">.</span>appchain<span class=\"token punctuation\">.</span>Contract</span><span class=\"token punctuation\">(</span>abi<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> current <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> nervos<span class=\"token punctuation\">.</span>appchain<span class=\"token punctuation\">.</span><span class=\"token function\">getBlockNumber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  transaction<span class=\"token punctuation\">.</span>validUntilBlock <span class=\"token operator\">=</span> current <span class=\"token operator\">+</span> <span class=\"token number\">88</span>\n  <span class=\"token keyword\">const</span> txRes <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> myContract\n    <span class=\"token punctuation\">.</span><span class=\"token function\">deploy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> data<span class=\"token punctuation\">:</span> bytecode<span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>transaction<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> nervos<span class=\"token punctuation\">.</span>listeners<span class=\"token punctuation\">.</span><span class=\"token function\">listenToTransactionReceipt</span><span class=\"token punctuation\">(</span>txRes<span class=\"token punctuation\">.</span>hash<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> contractAddress <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> res\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'contractAddress'</span><span class=\"token punctuation\">,</span> contractAddress<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">await</span> nervos<span class=\"token punctuation\">.</span>appchain<span class=\"token punctuation\">.</span><span class=\"token function\">storeAbi</span><span class=\"token punctuation\">(</span>contractAddress<span class=\"token punctuation\">,</span> abi<span class=\"token punctuation\">,</span> transaction<span class=\"token punctuation\">)</span> <span class=\"token comment\">// store abi on the chain</span>\n  nervos<span class=\"token punctuation\">.</span>appchain<span class=\"token punctuation\">.</span><span class=\"token function\">getAbi</span><span class=\"token punctuation\">(</span>contractAddress<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">)</span> <span class=\"token comment\">// get abi from the chain</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>创建 deploy.js 。这个是核心部署文件。首先导入了之前准备好的各项信息，创建了一个合约实例 myContract 。接下来跟区块链相关的接口基本都是异步操作，返回 Promise ，所以采用了 async 函数来执行。首先获得当前最新的区块高度，所谓区块高度就是区块链上最新的一个块是整条链的第几个块。然后用这个高度加上88作为 validUntilBlock 的值。接下来 deploy 一下字节码，然后就可以从 <code class=\"gatsby-code-text\">receipt</code> 也就是回执中，得到合约地址并打印出来。通过 <code class=\"gatsby-code-text\">storeAbi</code> 接口把合约 ABI 发送到链上。具体各个接口的描述可以参考 Nervos.js 的 npm 主页：<a href=\"https://www.npmjs.com/package/@nervos/chain\">https://www.npmjs.com/package/@nervos/chain</a> 。</p>\n<p>有了这些文件，再加上上一节的 complied.js 和 config.js 文件，代码就都准备好了。</p>\n<h2 id=\"运行部署\"><a href=\"#%E8%BF%90%E8%A1%8C%E9%83%A8%E7%BD%B2\" aria-label=\"运行部署 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>运行部署</h2>\n<p>下一步开始部署。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"gatsby-code-text\"><code class=\"gatsby-code-text\">npm run deploy</code></pre></div>\n<p>执行部署脚本。</p>\n<p>部署成功，可以看到打印出了合约地址和 ABI 信息。</p>\n<p><img src=\"https://img.haoqicat.com/2018091205.jpg\"></p>\n<p>到区块链浏览器下：<a href=\"https://microscope.cryptape.com/\">https://microscope.cryptape.com/</a> 搜索打印出的合约地址，发现出现的就是一个 Account ，下面有 contract 一项。点开，可以看到合约代码中对应的三个接口的相关界面。</p>\n<h2 id=\"总结\"><a href=\"#%E6%80%BB%E7%BB%93\" aria-label=\"总结 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>总结</h2>\n<p>经过两节的努力我们终于把一个简单的智能合约部署到了 Nervos 的 AppChain 之上，主要过程包括编译 solidity 写成的合约代码，拿到 ABI 和字节码之后，通过发送交易的方式，把这这二者保存到区块链上，最终拿到了合约地址，后续我们跟合约交互的时候，还要使用到合约地址，所以要妥善保存。</p>","frontmatter":{"title":"部署智能合约 part2","next":"10-interact.html","prev":"8-deploy-1.html"},"fields":{"path":"content/nerv-first/9-deploy-2.md","slug":"nerv-first/9-deploy-2.html"}}},"pageContext":{"slug":"nerv-first/9-deploy-2.html"}}