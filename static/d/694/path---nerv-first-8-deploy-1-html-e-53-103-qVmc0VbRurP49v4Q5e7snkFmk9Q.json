{"data":{"markdownRemark":{"html":"<p>通过前面一节，我们已经拥有了一个 AppChain 账户，并且申请了代币。从本节开始来部署一个简单的智能合约到 AppChain 的测试链上。内容比较多，我们分两个部分来完成，本节是第一部分，准备工作。</p>\n<h2 id=\"编译\"><a href=\"#%E7%BC%96%E8%AF%91\" aria-label=\"编译 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>编译</h2>\n<p> AppChain是兼容以太坊智能合约的，所以一样都能用 Solidity 写。写完之后，会用到 Solidity 自己的编译环境进行编译，这一步可以用以太坊的智能合约相关的开发工具。</p>\n<p>首先下载一个智能合约来练练手。官方的 DApp Demo 仓库：<a href=\"https://github.com/cryptape/dapp-demos/tree/develop/first-forever\">https://github.com/cryptape/dapp-demos/tree/develop/first-forever</a> ，有一个 SimpleStore.sol 文件，就是一个简单的智能合约。为了防止官方项目调整，大家找不到，我自己也把文件托管到了我的仓库中：<a href=\"https://github.com/happypeter/NervFirst/tree/master/contract\">https://github.com/happypeter/NervFirst/tree/master/contract</a> 。合约的内容暂时我们不关心，就是保存一些简单时间和留言数据。</p>\n<p>对于大型项目，可以需要在自己的机器上安装 Solc 也就是 Solidity 编译器。但是咱们这个合约比较小，所以直接用以太坊提供的 remix 环境进行编译即可：<a href=\"https://remix.ethereum.org/\">https://remix.ethereum.org/</a> 。</p>\n<p><img src=\"https://img.haoqicat.com/2018091203.jpg\"></p>\n<p>把 SimpleStore.sol 的源码粘贴到 remix 的编辑区域，然后点右侧的 <code class=\"gatsby-code-text\">start to compile</code> 进行编译。这里需要注意，有的时候需要稍微提高一下合约声明的版本号，才能编译通过。</p>\n<p><img src=\"https://img.haoqicat.com/2018091204.jpg\"></p>\n<p>编译的输出可以通过点 <code class=\"gatsby-code-text\">details</code> 按钮得到。</p>\n<p>这样合约就编译好了。</p>\n<h2 id=\"拿到字节码和-abi\"><a href=\"#%E6%8B%BF%E5%88%B0%E5%AD%97%E8%8A%82%E7%A0%81%E5%92%8C-abi\" aria-label=\"拿到字节码和 abi permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>拿到字节码和 ABI</h2>\n<p>所谓合约部署到区块链，就是把编译后的内容上传到区块链上。真正需要上传的是那些内容呢？一共两个，一个是字节码，另一个就是 ABI 。</p>\n<p>关于部署工作，目前 Nervos 还没有给出一个完善的集成环境来一键完成，所以我们来自己写代码把字节码和 ABI 两个东西部署到区块链上。参考官方的 first-forever 项目的思路：<a href=\"https://github.com/cryptape/dapp-demos/tree/develop/first-forever\">https://github.com/cryptape/dapp-demos/tree/develop/first-forever</a> ，整个过程主要使用 Nervos.js 来完成。</p>\n<p>deploy/compiled.js</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">const</span> bytecode <span class=\"token operator\">=</span> <span class=\"token string\">'...'</span>\n<span class=\"token keyword\">const</span> abi <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token punctuation\">]</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    abi<span class=\"token punctuation\">,</span>\n    bytecode\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>首先第一步，是把字节码和 ABI 拷贝到一个文件中保存。创建一个 compiled.js 文件，里面导出两项内容，一个是 abi ，另一个是 bytecode 也就是字节码。其中 bytecode 一项，就是 remix 最终编译结果中 <code class=\"gatsby-code-text\">bytecode</code> 一项下的 <code class=\"gatsby-code-text\">object</code> 那个字段的值，是一个长长的字符串。而 abi 一项就是一个数组，就直接在 remix 界面中的 <code class=\"gatsby-code-text\">abi</code> 一项下，直接点 <code class=\"gatsby-code-text\">copy</code> 图标，然后把拷贝到的内容粘贴到 compiled.js 文件中即可。我在 Github 上也上传了一个真实可用的版本供大家参考：<a href=\"https://github.com/happypeter/NervFirst/blob/master/deploy/compiled.js\">https://github.com/happypeter/NervFirst/blob/master/deploy/compiled.js</a> 。</p>\n<p>compiled.js 有了，就相当于咱们要部署的原材料有了。注意，compiled.js 只是在部署合约的时候用一次而已，以后合约真正运行起来，这个文件就没用了。</p>\n<h2 id=\"添加配置文件\"><a href=\"#%E6%B7%BB%E5%8A%A0%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\" aria-label=\"添加配置文件 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>添加配置文件</h2>\n<p>下一步来添加配置文件。主要就是体现两个知识点，第一点是合约部署是要缴费的，所以配置文件中要给出一个由足够余额的账户。第二点要明确的是上哪个链，我们这里就是上 Nervos AppChain 的测试链。下面来看看具体怎么做。</p>\n<p>config.js</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">const</span> config <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  chain<span class=\"token punctuation\">:</span> <span class=\"token string\">'http://121.196.200.225:1337 '</span><span class=\"token punctuation\">,</span>\n  privateKey<span class=\"token punctuation\">:</span>\n    <span class=\"token string\">'0x5d3c73fa94c85bbcb516cb256a4e82c414255a270b5d065179a94aa0d5dc3efe'</span>\n<span class=\"token punctuation\">}</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> config</code></pre></div>\n<p>配置文件中添加了两项内容，chain 就是用来指定测试链的链接，链接在 appChain 的官方文档上可以找到：<a href=\"https://docs.nervos.org/nervos-appchain-docs/#/quick-start/deploy-appchain\">https://docs.nervos.org/nervos-appchain-docs/#/quick-start/deploy-appchain</a> 。接下来 <code class=\"gatsby-code-text\">privateKey</code> 也就是私钥这一项，是上集中我们生成的那个账户的私钥。刚才我们说，配置文件中需要账户信息，而这里为啥只给出了私钥，没有给地址？这是因为有了私钥其实就可以运算出地址了，所以地址就不用填写了。</p>\n<p>这样配置文件就写好了。</p>\n<h2 id=\"总结\"><a href=\"#%E6%80%BB%E7%BB%93\" aria-label=\"总结 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>总结</h2>\n<p>这一节完成了部署一个智能合约的第一部分的工作，主要就是准备了要被上传到区块链上的字节码和 ABI ，然后添加了配置文件，其中包括部署合约必不可少的两个条件，一个是有充足余额的账户，另一个是测试链的链接。部署合约后续工作，我们下个小节中继续聊。</p>","frontmatter":{"title":"部署智能合约 part1","next":"9-deploy-2.html","prev":"7-coin.html"},"fields":{"path":"content/nerv-first/8-deploy-1.md","slug":"nerv-first/8-deploy-1.html"}}},"pageContext":{"slug":"nerv-first/8-deploy-1.html"}}