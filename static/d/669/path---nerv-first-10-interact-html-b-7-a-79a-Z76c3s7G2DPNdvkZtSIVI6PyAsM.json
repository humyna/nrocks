{"data":{"markdownRemark":{"html":"<p>合约部署完毕，真正的开发过程中就可以写 React 代码来跟合约进行交互了。但是咱们课程中为了演示清楚，先抛开 React ，通过写简单的 JS 脚本的形式，跟合约交互一下。</p>\n<h2 id=\"准备工作\"><a href=\"#%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C\" aria-label=\"准备工作 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>准备工作</h2>\n<p>交互这部分的代码，我们也放到一个单独的名叫 interact/ 文件夹中。interact 文件夹中的很多文件其实跟 deploy 文件夹中的代码很类似。</p>\n<p>config.js 中的内容跟 deploy 文件夹中的 config 内容基本一致，唯一的区别是添加了合约地址，contractAddress 这一项。显然，知道合约地址，才能跟合约进行交互。代码在 Github 仓库中：<a href=\"https://github.com/happypeter/NervFirst/blob/master/interact/config.js\">https://github.com/happypeter/NervFirst/blob/master/interact/config.js</a> 。注意，私钥和合约地址的具体的值都要根据自己部署时候的实际情况进行替换。</p>\n<p>nervos.js 和 transaction.js 跟 deploy 文件夹中的内容完全一样，直接拷贝过来即可。代码在 Github 仓库中也可以看到：<a href=\"https://github.com/happypeter/NervFirst/blob/master/interact\">https://github.com/happypeter/NervFirst/blob/master/interact</a> 。</p>\n<p>比较大的区别是 compiled.js 没有了，多了一个 simpleStore.js </p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">const</span> nervos <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./nervos'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> contractAddress <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./config'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> abi <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">const</span> transaction <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./transaction'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> simpleStoreContract <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">nervos<span class=\"token punctuation\">.</span>appchain<span class=\"token punctuation\">.</span>Contract</span><span class=\"token punctuation\">(</span>abi<span class=\"token punctuation\">,</span> contractAddress<span class=\"token punctuation\">)</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  transaction<span class=\"token punctuation\">,</span>\n  simpleStoreContract\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>导入 nervos 和 contractAddress ，ABI 在跟合约交互的时候还是需要的，所以从原来的 compiled.js 中拷贝过来粘贴到这里。导入交易，创建合约实例并导出。</p>\n<h2 id=\"主要交互代码\"><a href=\"#%E4%B8%BB%E8%A6%81%E4%BA%A4%E4%BA%92%E4%BB%A3%E7%A0%81\" aria-label=\"主要交互代码 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>主要交互代码</h2>\n<p>主要交互工作放到 index.js 文件中来进行。</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">const</span> nervos <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./nervos'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> simpleStore <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./simpleStore'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> text <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token string\">`hello </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span>\n<span class=\"token keyword\">const</span> time <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> current <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> nervos<span class=\"token punctuation\">.</span>appchain<span class=\"token punctuation\">.</span><span class=\"token function\">getBlockNumber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> tx <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>simpleStore<span class=\"token punctuation\">.</span>transaction<span class=\"token punctuation\">,</span>\n    validUntilBlock<span class=\"token punctuation\">:</span> <span class=\"token operator\">+</span>current <span class=\"token operator\">+</span> <span class=\"token number\">88</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> simpleStore<span class=\"token punctuation\">.</span>simpleStoreContract<span class=\"token punctuation\">.</span>methods\n    <span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">,</span> <span class=\"token operator\">+</span>time<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>tx<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> receipt <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> nervos<span class=\"token punctuation\">.</span>listeners<span class=\"token punctuation\">.</span><span class=\"token function\">listenToTransactionReceipt</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>hash<span class=\"token punctuation\">)</span>\n  receipt<span class=\"token punctuation\">.</span>errorMessage <span class=\"token operator\">&amp;&amp;</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>receipt<span class=\"token punctuation\">.</span>errorMessage<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token keyword\">from</span> <span class=\"token operator\">=</span>\n    nervos<span class=\"token punctuation\">.</span>appchain<span class=\"token punctuation\">.</span>accounts<span class=\"token punctuation\">.</span>wallet<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span>\n    nervos<span class=\"token punctuation\">.</span>appchain<span class=\"token punctuation\">.</span>accounts<span class=\"token punctuation\">.</span>wallet<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>address\n\n  <span class=\"token keyword\">const</span> times <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> simpleStore<span class=\"token punctuation\">.</span>simpleStoreContract<span class=\"token punctuation\">.</span>methods<span class=\"token punctuation\">.</span><span class=\"token function\">getList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">from</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'times'</span><span class=\"token punctuation\">,</span> times<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> messages <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span>\n    times<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>time <span class=\"token operator\">=></span>\n      simpleStore<span class=\"token punctuation\">.</span>simpleStoreContract<span class=\"token punctuation\">.</span>methods<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token keyword\">from</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'messages'</span><span class=\"token punctuation\">,</span> messages<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>index.js 中我们会跟合约中的一个写接口也就是 <code class=\"gatsby-code-text\">add</code> 和两个读接口 <code class=\"gatsby-code-text\">get</code> 和 <code class=\"gatsby-code-text\">getList</code> 进行交互。</p>\n<p>先来看写操作。add 接口接收两个参数，一个是时间，一个是留言。接下来，调用合约实例的 add 接口进行数据的写入，注意写入操作时通过发送交易进行的，所以这里用到了 <code class=\"gatsby-code-text\">send</code> 接口。而后续的读操作不需要发送交易，所以只需要 <code class=\"gatsby-code-text\">call</code> 也就是调用一下即可。</p>\n<p>数据上链需要经过至少3s的共识。如果要保证交易上链成功，就需要用到 <code class=\"gatsby-code-text\">listenToTransactionReceipt</code> 来监听交易回执信息。如果拿不到回执信息就意味着交易没有上链。有回执就表示上链了。如果回执中包含报错意味着交易执行失败了，但是注意，此时交易已经在链上了。</p>\n<p>如果没有显示报错信息，就证明写入成功，所以下面的代码来读取链上数据。分别调用 <code class=\"gatsby-code-text\">getList</code> 读取出时间列表，然后根据时间列表，通过 <code class=\"gatsby-code-text\">get</code> 接口就可以把所有的留言读取到。</p>\n<p>命令行中执行 <code class=\"gatsby-code-text\">node index.js</code> ，可以看到果然成功读取到了最新写入的时间和留言。</p>\n<h2 id=\"总结\"><a href=\"#%E6%80%BB%E7%BB%93\" aria-label=\"总结 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>总结</h2>\n<p>可以看到，由于有了 Nervos.js 的辅助，跟合约交互就是简单的接口调用，没有超出一个普通开发者的知识范围。我们成功的完成了使用 JS 代码跟合约进行读和写的交互操作，下一步就可以真正动手去写 App ，或者说就是写一个友好的 UI 了。最后要说明一下，本节的内容参考了 Nervos 官方的案例文档： <a href=\"https://github.com/cryptape/nervos-appchain-docs/blob/develop/zh-CN/quick-start/build-dapp.md\">https://github.com/cryptape/nervos-appchain-docs/blob/develop/zh-CN/quick-start/build-dapp.md</a> 。</p>\n<p>参考：</p>\n<ul>\n<li><a href=\"https://www.jianshu.com/p/0ed0be3f6abc\">https://www.jianshu.com/p/0ed0be3f6abc</a></li>\n</ul>","frontmatter":{"title":"与合约交互","next":"11-gas.html","prev":"9-deploy-2.html"},"fields":{"path":"content/nerv-first/10-interact.md","slug":"nerv-first/10-interact.html"}}},"pageContext":{"slug":"nerv-first/10-interact.html"}}